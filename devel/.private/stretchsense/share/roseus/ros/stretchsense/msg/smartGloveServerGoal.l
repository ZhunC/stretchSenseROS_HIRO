;; Auto-generated. Do not edit!


(when (boundp 'stretchsense::smartGloveServerGoal)
  (if (not (find-package "STRETCHSENSE"))
    (make-package "STRETCHSENSE"))
  (shadow 'smartGloveServerGoal (find-package "STRETCHSENSE")))
(unless (find-package "STRETCHSENSE::SMARTGLOVESERVERGOAL")
  (make-package "STRETCHSENSE::SMARTGLOVESERVERGOAL"))

(in-package "ROS")
;;//! \htmlinclude smartGloveServerGoal.msg.html


(defclass stretchsense::smartGloveServerGoal
  :super ros::object
  :slots (_goal ))

(defmethod stretchsense::smartGloveServerGoal
  (:init
   (&key
    ((:goal __goal) (let (r) (dotimes (i 0) (push "" r)) r))
    )
   (send-super :init)
   (setq _goal __goal)
   self)
  (:goal
   (&optional __goal)
   (if __goal (setq _goal __goal)) _goal)
  (:serialization-length
   ()
   (+
    ;; string[] _goal
    (apply #'+ (mapcar #'(lambda (x) (+ 4 (length x))) _goal)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string[] _goal
     (write-long (length _goal) s)
     (dolist (elem _goal)
       (write-long (length elem) s) (princ elem s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string[] _goal
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _goal (make-list n))
     (dotimes (i n)
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setf (elt _goal i) (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
     ))
   ;;
   self)
  )

(setf (get stretchsense::smartGloveServerGoal :md5sum-) "a81c39d59dcc333ed1c4342120568807")
(setf (get stretchsense::smartGloveServerGoal :datatype-) "stretchsense/smartGloveServerGoal")
(setf (get stretchsense::smartGloveServerGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
string[] goal  # Specify what the goal is

")



(provide :stretchsense/smartGloveServerGoal "a81c39d59dcc333ed1c4342120568807")


