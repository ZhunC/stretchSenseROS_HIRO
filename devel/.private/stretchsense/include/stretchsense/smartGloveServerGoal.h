// Generated by gencpp from file stretchsense/smartGloveServerGoal.msg
// DO NOT EDIT!


#ifndef STRETCHSENSE_MESSAGE_SMARTGLOVESERVERGOAL_H
#define STRETCHSENSE_MESSAGE_SMARTGLOVESERVERGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stretchsense
{
template <class ContainerAllocator>
struct smartGloveServerGoal_
{
  typedef smartGloveServerGoal_<ContainerAllocator> Type;

  smartGloveServerGoal_()
    : goal()  {
    }
  smartGloveServerGoal_(const ContainerAllocator& _alloc)
    : goal(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct smartGloveServerGoal_

typedef ::stretchsense::smartGloveServerGoal_<std::allocator<void> > smartGloveServerGoal;

typedef boost::shared_ptr< ::stretchsense::smartGloveServerGoal > smartGloveServerGoalPtr;
typedef boost::shared_ptr< ::stretchsense::smartGloveServerGoal const> smartGloveServerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stretchsense::smartGloveServerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stretchsense::smartGloveServerGoal_<ContainerAllocator1> & lhs, const ::stretchsense::smartGloveServerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stretchsense::smartGloveServerGoal_<ContainerAllocator1> & lhs, const ::stretchsense::smartGloveServerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stretchsense

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a81c39d59dcc333ed1c4342120568807";
  }

  static const char* value(const ::stretchsense::smartGloveServerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa81c39d59dcc333eULL;
  static const uint64_t static_value2 = 0xd1c4342120568807ULL;
};

template<class ContainerAllocator>
struct DataType< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stretchsense/smartGloveServerGoal";
  }

  static const char* value(const ::stretchsense::smartGloveServerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"string[] goal  # Specify what the goal is\n"
;
  }

  static const char* value(const ::stretchsense::smartGloveServerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct smartGloveServerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stretchsense::smartGloveServerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stretchsense::smartGloveServerGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.goal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRETCHSENSE_MESSAGE_SMARTGLOVESERVERGOAL_H
